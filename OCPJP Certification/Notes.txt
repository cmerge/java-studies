This is my notes file... It contains study points based on mock exam question mistakes.

1> System.console is NOT guaranteed to return a console instance!  Might just return null.  So don't use it without testing its return value first.
2> Console.readPassword() returns a char[]!  NOT a String!
3> Java is pass by value, always!  Don't be confused by the fact that when passing an object reference, you are still passing the value of that reference variable.  --> @35223f42ca    Something like that there.  It's still a value.  It's just the location in "memory" where the object resides.
4> The equals() method should be reflexive, symmetric, transitive and consistent.  It should also return false if passed null.
5> final is the only modifier that is allowed inside of a for:in loop initializer
6> It doesn't matter what the variable actually references!  It's type determines what the compiler will allow without an explicit cast.
7> The equals() methods of all wrapper classes first check if the two objects are of the same class or not.  If not, they immediately return false.
8> public void finalize() may be called manually, but there are no guarantees that it will ever be called by garbage collection
9> A char may be assigned to a byte, but a Character can NOT be assigned to a byte.
10> Implicit narrowing does not apply to method parameters!  example: new Byte(10) won't compile.  new Byte((byte)10) will
11> wait(), notify() and notifyAll() MUST be called from a synchronized context.
12> Any exception thrown in a static initializer block will result in an ExceptionInInitializerError.
13> There is no guarantee that a call to yield() will suspend the calling Thread.
14> Calling Thread.sleep() will ALWAYS suspend the calling Thread for at least the amount of time specified in the sleep() method.
15> protected(package and kids) is LESS restrictive than default(package).  This is a "duh" thing that I can't seem to get through my head.
16> enums are naturally ordered in the order they were defined. They are Singletons and their equals() and hashcode() methods are final
17> In a switch statement, enums as cases may only use their unqualified identifier per JLS.  So...  LARGE  not  SIZE.LARGE
18> Static method can not hide an instance method of a superclass
19> An instance method cannot override a static method of a superclass
20> StringBuilder and StringBuffer do NOT override equals() or hashcode()!
21> All Exceptions and Errors extend from Throwable, which extends Object
22> All Errors are considered unchecked by the compiler
23> RuntimeExceptions extend Exception, and are the ONLY group of unchecked Exceptions
24> printf() and format() have the same functionality
25> File.separator = / or \ depending on system ... / for Mac and \ for Windows
26> File.pathSeparator = : or ; depending on system
27> An enum may be referenced by an instance variable of that enum's type without an assignment ever being made.  WIERD!
28> If a binarySearch() can't find an element it returns (-(insertion point) - 1)
29> You cannot refer to an instance field while explicitly invoking a constructor.
30> A method-local inner class may be used only after it has been declared.
31> INT hashcode() <-- hashcode() returns an INT!!! not a long
32> A Map may not contain itself as a key, although it may contain itself as a value.
33> The equals methods of all wrapper classes first check to see if the two objects are of the same class.  If not, it immediately returns false.
34> String literals are stored in the string pool and therefore are not subject to standard GC.
35> There can be only one vararg in a method, and it must be the last argument.
36> A non-static inner class may have static members if you make them final.
37> Cannot have a break or continue in an 'if' or 'else' block unless the 'if' statement is placed within a labelled block or a switch statement or a loop construct
38> A constant may be used in a switch(...)
39> A class name can actually be used as an identifier:  String String = "String";
40> A switch statement MUST have a body, although the body may be empty. ie {}
41> Constructors are NEVER inherited.
42> Boolean operators have more precedence than =. (In fact, = has least precedence)
43> A 'null' reference may be used to access a class (static) variable without causing an exception.
44> LinkedList implements Queue, so it has add()/offer(), remove()/poll() and element()/peek() methods.
45> Declaring a new method in an anonymous subclass creates a method that is unreachable from outside the subclass.
46> When overriding, the return type of the overriding method must match exactly to the return type of the overridden method if the return type is a primitive.
47> byte range: -128 to 127
48> A short variable can NEVER be assigned to a char without explicit casting.  A short CONSTANT CAN be if it's value fits into a char.
49> Any field in an interface is implicitly public, static and final whether these keywords are specified or not.
50> In a try/finally block, any exception thrown by the try block will be ignored if an exception is also thrown in the the finally block.
51> E ceiling(E e) - Returns the least element in this set greater than or equal to the given element, or null if there is no suck element.
52> E floor(E e) - Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.
53> E higher(E e) - Returns the least element in this set STRICTLY greater than the given element, or null if there is no such element.
54> E lower(E e) - Returns the greatest element in this set STRICTLY less than the given element, or null if there is no such element.
55> %b implies you are trying to print a value as a boolean.  The rule for conversion to a boolean is as follows:  If the argument arg is null, the the result is "false".  If arg is a boolean or Boolean, then the result is the string returned by String.valueOf(arg).  Otherwise, the result is "true".
56> Object's hashcode() method returns a unique hashcode for every object.
57> An overriding method's return type can be any object that satisfies an IS-A relationship with the overridden method's return type. NOTE: This doesn't apply to primitive return types!
58> Java 'reuses' all the wrapper objects whose values fall in the following ranges: All Boolean values, All Byte values, All Character values from 0-127 in decimal, All Short and Integer values from -128 - 127
59> All the wrapper classes are immutable.  Integer i = 1; i++; --> actually creates new Integer(i.intValue() + 1)
60> Abstract classes are MEANT to be overridden.
61> Literal strings within the same class represent references to the same String object.
62> Literal strings within different classes in the same package represent references to the same String object.
63> Literal strings within different classes in different packages represent references to the same String object.
64> Strings computed by constant expressions are computed at compile time and then treated as if they were literals.
65> Strings computed at run time are newly created and therefore are distinct.
66> The result of explicitly interning a computed string is the same string as any pre-existing literal string with the same contents.
67> <> is not allowed for a source level less than 1.7
68> super keyword may be used both inside and outside of constructors to reference the superclass of "this".  It can be used to invoke the superclass's version of an overridden method:  super.doStuff()
69> All operands of type byte, char or short are promoted AT LEAST to an int before performing mathematical operations.
70> the append() method is in StringBuffer and StringBuilder, NOT String!
71> String overrides hashCode() and equals().
72> All keys in a map must be unique, but multiple identical values may exist.
73> Map is considered part of the Collections Framework, but does not implement the Collection interface.  Don't be tricked by this again!
74> When a programmer does not define ANY constructor, the complier inserts one automatically, the access modifier of which is the same as that of the class.
75> cA[1] = cA[0] = 'm'; <--- is valid Java syntax!  Notice the chained assignments.
76> Narrowing Primitive Conversions: double->float->long->int->char->short->byte
77> Widening Primitive Conversions: byte->short->int->long->float->double   char widens to an int and larger.
78> If you want to widen a byte or a short to a char, it must first be widened to an int and then narrowed to a char.
79> Covariant returns are allowed in Java 1.5+, meaning that an overriding method can change the return type of the overridden method to a subclass of the original return type.
80> When a program is run, the JVM looks for a method named main(), which takes an array of strings and has void as a return type.  If not found, it throws java.lang.NoSuchMethodError.
81> String.substring(int beginIndex) will accept an argument up to/including the length of the string without throwing an IndexOutOfBoundsException.
82> You can read from as well as write to the java.io.Console class.  ONLY CHARACTER DATA MAY BE READ/WRITTEN
83> String.split(regex, n) - split the string up to n-1 times using pattern regex.  If n = 0, trailing empty strings will be discarded.
84> Sting.split(regex) - equivalent to calling above method with n = 0.
85> Object initialization order: static statements/blocks in order, instance statments/blocks in order, finally constructor
86> int[] array1, array2[]; -- array1 is an array of ints, while array2 is an array of int ARRAYS!
87> Circular references to objects do not prevent them from being GCed.
88> Keywords (like do) can not be used to make valid method names.
89> A class having no abstract methods can still be abstract, but not vice-versa.
90> Unreachable code will result in a compiler error.
91> Any numeric comparison operation involving one or two NaNs always returns false and any != comparison returns true, including x != x, when x = NaN.
92> There is no need to catch a RuntimeException, but it is ok even if the method declares them explicitly.
93> Java does not allow chained initialization in declaration.  int a, b, c; a=b=c=100; <--YES  int a=b=c=100 <--NO!
94> A Comparator determines equality as well as order.
95> Float.NaN == Float.NaN  --> FALSE!
96> new Float(NaN).equals(new Float(NaN) --> TRUE!
97> Cannot use an existing/predefined variable in the variable declaration part of an enhanced for loop. ie int i = 0; for (i: iarray);
98> Calling interrupt() on a thread will cause an InterruptedException ONLY if that thread is blocked on an invocation of the wait(...), join(...), or sleep(...) method.
99> Valid identifiers cannot start with a digit!
100> Just declaring some object of class 'T',  or even assigning null to T will not cause it's "statics" to be evaluated.
101> A NavigableSet is a SortedSet extended with navigation methods: lower, floor, ceiling, and higher.
102> Only member classes may be marked static.
103> Member variables are shadowed and not overridden by subclasses.
104> A final variable must be initialized when an instance is constructed, otherwise the code will not compile.
105> A class may be marked abstract and yet have no abstract methods.
106> String.replace() creates a new String object if there is a change, otherwise it returns the original object.
107> The increment operator (i++) is NOT atomic, and is therefore not thread-safe.
108> In a switch() clause, only byte, char, short or int may be used, and every case constant must be assignable to the type of the switch expression.
109> The range of a char data type is 0 - 65,535 (0 to 2^16-1).  It is 2 bytes wide like a short, but contains no negative values.
110> You must provide a type name when instantiating a typed class.  Hashmap<?, List<String>> map = new HashMap<String, List<String>>() ... No ?'s on the right!
111> An abstract class can have a constructor.
112> A source file is not required to have a class marked public in it, however, if there is a public class in the file, the file's name must match that class's name.
113> You do not need an explicit cast to use a unary operator: byte b = 4; b++;
114> An anonymous inner class can NOT have a constructor...after all, what would you name it?
115> When performing an arithmetic operation on primitive values, the result will be treated as AT LEAST an int.
116> A returned subSet will throw an IllegalArgumentException if an attempt is made to add an element that is outside its range.
117> In a switch construct, case default: ... is sytactically wrong, it should just be default: ...
118> A private member of an inner class is accessible to that class's outer class.
119> A call to System.gc() is equivalent to calling Runtime.getRuntime().gc()
120> The default number of decimal places that %f prints is 6.
121> There is no DateFormat.getDateInstance(Locale l) method.  A style must be supplied with the locale or no arguments should be given.
122> A class can not be imported statically.
